name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: ws://localhost:8100/rpc
  DATABASE_USER: root
  DATABASE_PASS: root
  DATABASE_NS: slatehub-test
  DATABASE_DB: test
  MINIO_ENDPOINT: http://localhost:9100
  MINIO_ACCESS_KEY: slatehub-test
  MINIO_SECRET_KEY: slatehub-test123
  MINIO_BUCKET: slatehub-test-media

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      surrealdb:
        image: surrealdb/surrealdb:latest
        ports:
          - 8100:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          SURREAL_LOG: error

      minio:
        image: minio/minio:latest
        ports:
          - 9100:9000
          - 9101:9001
        env:
          MINIO_ROOT_USER: slatehub-test
          MINIO_ROOT_PASSWORD: slatehub-test123
          MINIO_CONSOLE_ADDRESS: :9001
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: server/target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      working-directory: ./server
      run: cargo fmt -- --check

    - name: Run clippy
      working-directory: ./server
      run: cargo clippy -- -D warnings

    - name: Build
      working-directory: ./server
      run: cargo build --verbose

    - name: Start SurrealDB
      run: |
        docker run -d \
          --name slatehub-surrealdb-test \
          -p 8100:8000 \
          surrealdb/surrealdb:latest \
          start --log error --user root --pass root memory

        # Wait for SurrealDB to be ready
        for i in {1..30}; do
          if curl -s -f http://localhost:8100/health; then
            echo "SurrealDB is ready"
            break
          fi
          echo "Waiting for SurrealDB..."
          sleep 1
        done

    - name: Setup MinIO bucket
      run: |
        # Install MinIO client
        wget https://dl.min.io/client/mc/release/linux-amd64/mc
        chmod +x mc

        # Configure MinIO client
        ./mc alias set minio http://localhost:9100 slatehub-test slatehub-test123

        # Create test bucket
        ./mc mb minio/slatehub-test-media || true

    - name: Run unit tests
      working-directory: ./server
      run: cargo test --lib -- --test-threads=1 --nocapture

    - name: Run integration tests
      working-directory: ./server
      run: cargo test --test '*' -- --test-threads=1 --nocapture

    - name: Generate test report
      if: always()
      working-directory: ./server
      run: |
        cargo test --all -- --test-threads=1 --format=json | tee test-results.json || true

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: server/test-results.json

  coverage:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      surrealdb:
        image: surrealdb/surrealdb:latest
        ports:
          - 8100:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          SURREAL_LOG: error

      minio:
        image: minio/minio:latest
        ports:
          - 9100:9000
          - 9101:9001
        env:
          MINIO_ROOT_USER: slatehub-test
          MINIO_ROOT_PASSWORD: slatehub-test123
          MINIO_CONSOLE_ADDRESS: :9001
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Start SurrealDB
      run: |
        docker run -d \
          --name slatehub-surrealdb-test \
          -p 8100:8000 \
          surrealdb/surrealdb:latest \
          start --log error --user root --pass root memory

        # Wait for SurrealDB to be ready
        for i in {1..30}; do
          if curl -s -f http://localhost:8100/health; then
            echo "SurrealDB is ready"
            break
          fi
          echo "Waiting for SurrealDB..."
          sleep 1
        done

    - name: Setup MinIO bucket
      run: |
        # Install MinIO client
        wget https://dl.min.io/client/mc/release/linux-amd64/mc
        chmod +x mc

        # Configure MinIO client
        ./mc alias set minio http://localhost:9100 slatehub-test slatehub-test123

        # Create test bucket
        ./mc mb minio/slatehub-test-media || true

    - name: Generate coverage
      working-directory: ./server
      run: |
        cargo tarpaulin \
          --out Xml \
          --output-dir ../target/coverage \
          --exclude-files "*/tests/*" \
          --exclude-files "*/target/*" \
          -- --test-threads=1

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./target/coverage/cobertura.xml
        fail_ci_if_error: true

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: target/coverage/
